Module 6: Modules and Packages in Python
Introduction
Modules and packages are key to efficient programming in Python, allowing you to organize your code logically and reuse code across different projects. A module is a single Python file, while a package is a directory of Python modules containing an additional __init__.py file.

Objectives
Understand the concepts of modules and packages in Python.
Learn how to import and use existing modules.
Discover how to create your own modules and packages.
Explore some of the standard modules Python has to offer.
Using Existing Modules
Python comes with a rich standard library of modules that you can utilize to add functionality to your programs without having to write the code from scratch.

python
Copy code
# Importing and using the math module
import math

result = math.sqrt(16)  # Calculates the square root
print(result)
Creating Your Own Modules
Creating your own module is as simple as saving your code in a .py file. This file can then be imported into other Python scripts.

python
Copy code
# Assume we have a file named mymodule.py with a function called greet()
import mymodule

mymodule.greet("Alice")
Packages
A package is a way of structuring Python’s module namespace by using “dotted module names”. To create a package, simply save your modules in a directory with an __init__.py file.

python
Copy code
# Directory structure for a package named "mypackage"
mypackage/
    __init__.py
    submodule1.py
    submodule2.py
Exploring Standard Modules
Python's standard library is extensive. Spend some time exploring modules like datetime for working with dates and times, os for interacting with the operating system, and json for working with JSON data.

Practice Exercises
Use the random module to generate a list of ten random numbers between 1 and 100.
Create a module named calculator that contains functions for adding, subtracting, multiplying, and dividing numbers. Import this module into another script and use its functions.
Explore the os module and write a script that prints your current working directory and lists all files and directories in it.
Conclusion
Modules and packages are fundamental for developing scalable and maintainable Python applications. They not only help in organizing your code better but also make it possible to leverage a vast ecosystem of pre-built functionalities available in Python's standard library and third-party packages.
